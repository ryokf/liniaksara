'use client';

import React from 'react';
import dynamic from 'next/dynamic';

interface PDFViewerProps {
    url: string;
    title?: string;
    chapterNumber?: number;
    onNavigateChapter?: (direction: 'prev' | 'next') => void;
    hasNextChapter?: boolean;
    hasPrevChapter?: boolean;
    onBack?: () => void;
}

const PDFViewer = dynamic(
  () => import('./PDFViewerComponent'),
  { 
    ssr: false,
    loading: () => (
      <div className="fixed inset-0 w-full h-full bg-black flex items-center justify-center">
        <div className="text-white">Loading PDF viewer...</div>
      </div>
    )
  }
);mport React, { useState, useEffect } from 'react';
import { ChevronLeft, ChevronRight, ZoomIn, ZoomOut, Maximize2, ArrowLeft } from 'lucide-react';
import dynamic from 'next/dynamic';

const PDFViewer = dynamic(
  () => import('./PDFViewerComponent'),
  { 
    ssr: false,
    loading: () => (
      <div className="fixed inset-0 w-full h-full bg-black flex items-center justify-center">
        <div className="text-white">Loading PDF viewer...</div>
      </div>
    )
  }
);

interface PDFViewerProps {
    url: string;
    title?: string;
    chapterNumber?: number;
    onNavigateChapter?: (direction: 'prev' | 'next') => void;
    hasNextChapter?: boolean;
    hasPrevChapter?: boolean;
    onBack?: () => void;
}

const PDFViewer: React.FC<PDFViewerProps> = ({
    url,
    title,
    chapterNumber,
    onNavigateChapter,
    hasNextChapter,
    hasPrevChapter,
    onBack
}) => {
    const [numPages, setNumPages] = useState<number>(0);
    const [currentPage, setCurrentPage] = useState<number>(1);
    const [scale, setScale] = useState<number>(1.0);
    const [isLoading, setIsLoading] = useState(true);
    const [isDoublePage, setIsDoublePage] = useState(true);

    const onDocumentLoadSuccess = ({ numPages }: { numPages: number }) => {
        setNumPages(numPages);
        setIsLoading(false);
    };

    const handleZoom = (direction: 'in' | 'out') => {
        if (direction === 'in' && scale < 2.0) {
            setScale(prev => prev + 0.1);
        } else if (direction === 'out' && scale > 0.5) {
            setScale(prev => prev - 0.1);
        }
    };

    const handlePageChange = (offset: number) => {
        const newPage = currentPage + offset;
        if (newPage >= 1 && newPage <= numPages) {
            setCurrentPage(newPage);
        } else if (newPage > numPages && hasNextChapter) {
            onNavigateChapter?.('next');
        } else if (newPage < 1 && hasPrevChapter) {
            onNavigateChapter?.('prev');
        }
    };

    return (
        <div className="fixed inset-0 w-full h-full bg-black">
            {/* Top Navigation */}
            <div className="absolute top-0 left-0 right-0 h-16 bg-gray-900/80 backdrop-blur-sm z-50 flex items-center justify-between px-4">
                <div className="flex items-center gap-4">
                    <button 
                        onClick={onBack}
                        className="text-white hover:text-gray-300 transition-colors"
                    >
                        <ArrowLeft size={24} />
                    </button>
                    <div className="text-white">
                        <h2 className="text-lg font-semibold">{title}</h2>
                        <p className="text-sm text-gray-300">Chapter {chapterNumber}</p>
                    </div>
                </div>
                <div className="flex items-center gap-2">
                    <button 
                        onClick={() => handleZoom('out')}
                        className="p-2 text-white hover:bg-white/10 rounded-full transition-colors"
                        disabled={scale <= 0.5}
                    >
                        <ZoomOut size={20} />
                    </button>
                    <button 
                        onClick={() => handleZoom('in')}
                        className="p-2 text-white hover:bg-white/10 rounded-full transition-colors"
                        disabled={scale >= 2.0}
                    >
                        <ZoomIn size={20} />
                    </button>
                    <button 
                        onClick={() => setIsDoublePage(!isDoublePage)}
                        className="p-2 text-white hover:bg-white/10 rounded-full transition-colors"
                    >
                        <Maximize2 size={20} />
                    </button>
                </div>
            </div>

            {/* Content */}
            <div className="h-full w-full flex items-center justify-center pt-16 relative">
                {/* PDF Document */}
                <div className="flex-1 h-full overflow-auto flex items-center justify-center">
                    <Document
                        file={url}
                        onLoadSuccess={onDocumentLoadSuccess}
                        loading={<div className="text-white">Loading...</div>}
                    >
                        <div className="flex gap-4">
                            <Page
                                pageNumber={currentPage}
                                scale={scale}
                                loading={<div className="text-white">Loading page...</div>}
                                renderTextLayer={false}
                                renderAnnotationLayer={false}
                            />
                            {isDoublePage && currentPage < numPages && (
                                <Page
                                    pageNumber={currentPage + 1}
                                    scale={scale}
                                    loading={<div className="text-white">Loading page...</div>}
                                    renderTextLayer={false}
                                    renderAnnotationLayer={false}
                                />
                            )}
                        </div>
                    </Document>
                </div>

                {/* Navigation Buttons */}
                <button
                    onClick={() => handlePageChange(-2)}
                    disabled={currentPage <= 1 && !hasPrevChapter}
                    className="absolute left-4 top-1/2 transform -translate-y-1/2 text-white p-2 rounded-full bg-gray-900/50 hover:bg-gray-900/80 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                    <ChevronLeft size={24} />
                </button>
                <button
                    onClick={() => handlePageChange(2)}
                    disabled={currentPage >= numPages && !hasNextChapter}
                    className="absolute right-4 top-1/2 transform -translate-y-1/2 text-white p-2 rounded-full bg-gray-900/50 hover:bg-gray-900/80 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                    <ChevronRight size={24} />
                </button>
            </div>
        </div>
    );
};

export default PDFViewer;

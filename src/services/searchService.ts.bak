import supabase from '@/config/supabase';
import { Work } from '@/types/wor                            works!author_id (
                    id,
                    title,
                    cover,
                    work_type:work_types!work_type_id(
                        id,
                        name
                    )
                )

export type SearchType = 'works' | 'users';

export interface SearchUser {
    id: string;
    username: string;
    full_name?: string;
    avatar_url?: string;
    works?: Array<{
        id: string;
        title: string;
        cover?: string;
        work_type?: {
            id: string;
            name: string;
        };
    }>;
}

export interface SearchResults {
    works: Work[];
    users: SearchUser[];
    type: SearchType;
}

export async function searchWorks(query: string): Promise<Work[]> {
    if (!query) return [];
    
    try {
        const { data, error } = await supabase
            .from('works')
            .select(`
                *,
                work_type:work_types!work_type_id(*),
                author:profiles!author_id(
                    id,
                    username,
                    full_name,
                    avatar_url
                )
            `)
            .eq('is_draft', false)
            .or(`title.ilike.%${query}%,description.ilike.%${query}%`);

        if (error) {
            console.error('Error searching works:', error);
            throw new Error(`Failed to search works: ${error.message}`);
        }
        
        return data || [];
    } catch (err) {
        console.error('Error in searchWorks:', err);
        throw err;
    }
}

export async function searchUsers(query: string): Promise<SearchUser[]> {
    if (!query) return [];
    
    try {
        const { data, error } = await supabase
            .from('profiles')
            .select(`*`)
            .or(`username.ilike.%${query}%,full_name.ilike.%${query}%`)
            .limit(20);

        if (error) {
            console.error('Error searching users:', error);
            throw new Error(`Failed to search users: ${error.message}`);
        }
        
        return (data?.map(user => ({
            ...user,
            works: user.works?.map((work: Work) => ({
                ...work,
                work_type: work.work_type?.[0]
            }))
        })) || []) as SearchUser[];
    } catch (err) {
        console.error('Error in searchUsers:', err);
        throw err;
    }
}

export async function search(query: string, type: SearchType = 'works'): Promise<SearchResults> {
    if (!query) return { works: [], users: [], type };

    try {
        if (type === 'works') {
            const works = await searchWorks(query);
            return { works, users: [], type };
        } else {
            const users = await searchUsers(query);
            return { works: [], users, type };
        }
    } catch (error) {
        console.error('Search error:', error);
        // Membuat pesan error yang lebih informatif
        const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';
        throw new Error(`Failed to perform search: ${errorMessage}`);
    }
}
